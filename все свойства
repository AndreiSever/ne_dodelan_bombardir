div > div {
	width: 50px; /* ширина элемента */
	height: 50px; /* высота элемента */
	border: 3px solid rgb(0,150,208); /* сплошная граница размером 3 пикселя */
	margin: 5px; /* внешние отступы со всех сторон */
}
div > div {  -  Берет только дочерние div (второй уровень), а не все вложенные
	width: 30%; /* ширина элемента */
	background: rgb(0,150,208); /* цвет заднего фона */
	color: #fff; /* цвет текста */
	margin: 1px; /* внешние отступы со всех сторон */
}
.container,
.container2
{   
	display: flex; /* блочные флекс контейнеры */
	height: 200px; /* высота контейнера */
	background: rgba(0,0,0,.4); /* цвет заднего фона */
}

div > div:nth-of-type(1) { /* выбираем первый <div> в каждом контейнере */ 
	background: orange; /* цвет заднего фона */
	font-size: 30px; /* размер шрифта */
}
div > div:nth-of-type(2) { /* выбираем второй <div> в каждом контейнере */ 
	background: tan; /* цвет заднего фона */
	font-size: 20px; /* размер шрифта */
	} 
div > div:nth-of-type(3) { /* выбираем третий <div> в каждом контейнере */ 
	background: rgb(0,150,208); /* цвет заднего фона */
	font-size: 15px; /* размер шрифта */
}

.container div:nth-of-type(4) { /* выбираем четвертый <div> в первом контейнере */ 
	order: -1;  /* определяем порядок следования флекс элемента */
	background: violet;  /* цвет заднего фона */ 
}
.container2 div:nth-of-type(4) { /* выбираем четвертый <div> во втором контейнере */ 
	order: 1;  /* определяем порядок следования флекс элемента */
	background: violet;  /* цвет заднего фона */ 
}
.container3 div:nth-of-type(4) { /* выбираем четвертый <div> в третьем контейнере */ 
	order: 2;  /* определяем порядок следования флекс элемента */
	background: violet;  /* цвет заднего фона */ 
}

.container,
.container2,
.container3 {     
	display: flex; /* блочные флекс контейнеры */
}
.container {       
	flex-wrap: nowrap; /* однострочный флекс контейнер (по умолчанию) */
}
.container2 {     
	flex-wrap: wrap; /* многострочный флекс контейнер */
}
.container3 {     
	flex-wrap: wrap-reverse; /* многострочный флекс контейнер (формирование строк идёт в обратном порядке)*/
}
.content {    
	display: flex;  /* элемент отображается как блочный флекс контейнер */
	height: calc(100vh - 200px);  /* высчитываем высоту для элемента */
	background: #999;  /* цвет заднего фона */
}
@font-face { - ВЫЗОВ СКАЧАННОГО ШРИФТА
font-family: "Roboto";  /* задаем произвольное имя для шрифта, которое будет использоваться в свойстве font-family при указании стилей для конкретных элементов */
src: url("/fonts/Roboto-Italic.ttf") format('truetype');  /* задаем путь относительно корня сайта к шрифту (url) и тип шрифта (format). Тип шрифта выступает подсказкой для браузера (в идеале ускоряет процесс обработки) */
font-style: italic;  /* указываем, что стиль шрифта курсивный */
font-weight: normal;  /* определяет нормальное начертание символов - это значение по умолчанию */ 
}
h2, p, b, i {  /* задаем групповой селектор для элементов <h2>, <p>, <b>, <i> */
font-family: "Roboto", sans-serif;  /* устанавливаем шрифт Roboto, если он не будет загружен по какой-то причине, то указываем, чтобы браузер установил шрифт из семейства шрифтов без засечек (sans-serif)  */
}

z-index: auto - по порядку в DOM. Порядок по оси Z. Наложение элементов друг на друга. 
z-index: 2 - число
z-index: inline - в значение по умолчанию
z-index: inherit - наследует значение от родительского элемента
position: relative - Относительное позиционирование. Отрицательное значение влево, положительно вправо.
left: 200px - смещает вправо относительно текущего места
position: absolute - смещает относительного левого края предка. Значение должно быть отличное от Static
left: 200px
position: fixed - смещается от окна браузера
left: 200px
position: static - по умолчанию. значение left не повлияет.
Tag::after{  - После элемента. Все селекторы.
    content:
}
Tag::before{  - Перед Элементом
    content:
}
input:focus{} - При выборе поля
div:active{} - Клик
div:hover{} - срабатывает при наведении, используется для стилизации. После :link и :visited
img[alt] - выбор атрибутом alt у элемента
input[type=password]:focus { /* выбираем элемент <input>, атрибут type которого имеет значение password и который находится в фокусе */
border: 1px solid green; /* устанавливаем сплошную границу размером 1 пиксель зеленого цвета */
} 
:first-child
:last-child
h2:nth-child(3) - Селектор по номеру
.primer1 tr:nth-child(even) - Выбирает все четные
.primer2 tr:nth-child(odd) - Выбирает все нечетные
.test p:first-of-type - первый элемент определенного типа
:last-of-type - последний

https://fonts.google.com/ - качать шрифты
Подключение шрифта
<link href = 'https://fonts.googleapis.com/css?family=Roboto:400,700,400italic&subset=latin,cyrillic' rel = 'stylesheet' type = 'text/css'> 
text-decoration: none; /* убираем декорирование текста (нижнее подчеркивание) */
text-decoration: underline - Подчеркивание под текстом
text-decoration: overline - Подчеркивание над текстом
text-decoration: line-through - Зачеркивание
text-transform: none - Регистр
text-transform: capitalize - Преобразует первые символы каждого слова в верхний регистр
text-transform: uppercase - Преобразует все символы в верхний регистр
text-transform: lowercase - Преобразует все символы в нижний регистр.
font-variant - строчные знаки выглядят как уменьшенные заглавные буквы
color: brown; /* устанавливаем цвет текста */
font-weight: bold; /* устанавливаем жирное начертание шрифта */
font-size: 20 px - Размер шрифта
font-size: 50%; 
font-family: Arial
font-style: normal;  /* указываем, что стиль шрифта обычный
color: red !important; /* отменяем значимость стилей и устанавливаем цвет текста красный */
text-align: left
text-align: right
text-align: center
text-align: justify - Растягивает текст по ширине
text-indent: 20 px - Отступ первой строки текста (% тоже есть)
line-height: 20px - Высота строки. Междустрочный интервал (Высота строки - размер шрифта)
letter-spacing: 2 px - расстояние между символами
word-spacing: 5px - расстояние между словами

list-style-type - Типы нумерации списка ul и ol
list-style-position : outside - Вложенность списков
list-style-position : inside
list-style-image : url('images/primer.png')

border-width
border-style: none - стиль границы
border-style: hidden
border-style: dotted - Точечная граница
border-style: dashed - Пунктирная граница
border-style: solid - Сплошная граница
border-style: double - Двойная граница
border-style: groove - с 3d эффектом
border-style: ridge - с 3d эффектом
border-style: inset - с 3d эффектом
border-style: outset - с 3d эффектом
border-color
border: 4px solid orange
border-radius:
border-top-left-radius
box-shadow - Тень для элемента. Не стал разбираться
box-sizing: border-box - Меня модель счета пикселей. Включается border и padding. Особенно если ВАЖНО inline-block 
box-sizing: content-box; /* ширина и высота элемента включают в себя только содержание элемента (по умолчанию)
overflow: visible - по умолчанию
overflow: hidden - Переполнение обрезается
overflow: scroll - Переполнение обрезается, но добавляется полоса прокрутки
overflow: auto - Если переполнение обрезается, то полоса прокрутки будет добавлена автоматически
vertical-align: top; /* верх элемента выравнивается по верху самого высокого элемента в строке (вертикальное позиционирование) */
margin: 5px - внешние отступы со всех сторон

display: block;
display: inline-block - строчный блочный контейнер
display: flex - блочный флекс контейнер, флекс элементы только дочерние. Внутри дочерних не флекс элементы
display: inline-flex - строчный флекс контейнер, обычные встроенные элементы, сохраняя гибкость
flex-direction - указать направление для элементов внутри. Главная ось - горизонтальная, поперечная -вертикальная
flex-direction:  row - по умолчанию слева-направо
flex-direction: column  - сверху - вниз
flex-direction: row-reverse - справа - налево
flex-direction: column-reverse - снизу вверх
flex-wrap: nowrap - однострочный контейнер
flex-wrap: wrap - многострочный, элемент перескакивает на вторую строку. слева - направо
flex-wrap: wrap-reverse - многострочный. справа налево
flex-flow: "flex-direction flex-wrap"; - отображает два свойства сразу и направление, и многострочность
flex-flow: row-reverse wrap-reverse
justify-content: flex-start - Горизонтальное выравнивание. Распределяет пространство между и вокруг элементов 
                            по умолчанию. слева-направо. Работает когда явно указана ширина элементов и есть место
justify-content: flex-end - справа-налево
justify-content: center - выравнивание по центру
justify-content: space-between - равномерно распределяются по все строке
justify-content: space-around - равномерно распределяются, но пустое пространство перед первым и последним равно половине
align-content: stretch - Вертикальное выравнивание. Работает только при свойстве flex-wrap: wrap. 
                        Строки равномерно растягиваются. Распределяет пространство между и вокруг элементов
align-content: flex-start - Строки сверху
align-content: flex-end - Строки снизу
align-content: center - По центру
align-content: space-between - Распределяются равномерно. Сверху и снизу
align-content: space-around - Между двумя строками одинаковое, но перед первым и после последнего равно половине
align-content: evenly - Равномерно все
align-items: stretch - Выравнивание по высоте строки. аналог justify-content, но вертикально. 
                    Растягиваются по размеру контейнера
align-items: flex-start - распалагаются вначале контейнера 
align-items: flex-end - распалагаются вконце контейнера
align-items: center - по центру контейнера
align-items: baseline - элементы распалагаются по их базовой линии
order: -1 - Задает порядок элементов горизонтально или вертикально. Значение любое. Это просто значение.
align-self: stretch - переопределяет align-items. Выравнивает по вертикали 1 элемент.
align-self: auto - Берет значение родительского элемента. Растягивается по размеру строки.
align-self: flex-start - начало строки
align-self: flex-end - конец строки
align-self: center - по центру строки
align-self: baseline - по базовой линии строки
flex-grow: 2 - Относительная ширина.Элемент будет увеличен в два раза по отношению к остальным элементам
flex-basis: 200px - Размер по умолчанию перед распределением flex-grow. Не может выйти за пределы родителя. 
                    Если произошло - уменьшится. (ШИРИНА или высота учитывается???)
flex-shrink: 2 - на сколько будет уменьшена ширина блока по отношению к остальным
flex - Универсальная установка значений по умолчанию, если одна переменная:
flex: 2 - то flex-grow
flex: 20px - то flex-basis
flex: 1 1 100px - то grow|shrink|basis

@media
@font-face - правило позволяет сайт скачать и использовать шрифты
@keyframes - контроль промежуточных этапов анимации
@import - импорт css файла
and, not, only, "," - Логические операторы для медиа запроса
media type:
- all - для всех 
- print - печатные страницы
- screen - экраны компьютера
- speech  - речь
Функции:
- aspect-ratio - соотношение пикселей по горизонтали и вертикали
- max-aspect-ratio
- min-aspect-ratio
- grid - выходное устройство на сеточной системе
- height - Задает высоту области просмотра
- max-height
- min-height
- width
- max-width
- min-width
- orientation: landscape
- orientation: portrait
@media not | only mediatype and (media function) {
  ...код CSS
}
// Small devices (landscape phones, минимальная ширина области просмотра 576px и выше)
@media (min-width: 576px) { ...код CSS }

// Medium devices (tablets, минимальная ширина области просмотра 768px и выше)
@media (min-width: 768px) { ...код CSS }

// Large devices (desktops, минимальная ширина области просмотра 992px и выше)
@media (min-width: 992px) { ...код CSS }

// Extra large devices (large desktops, минимальная ширина области просмотра 1200px и выше)
@media (min-width: 1200px) { ...код CSS }

// Extra small devices (portrait phones, максимальная ширина области просмотра 576px и ниже)
@media (max-width: 575.98px) { ...код CSS }

// Small devices (landscape phones, максимальная ширина области просмотра 768px и ниже)
@media (max-width: 767.98px) { ...код CSS }

// Medium devices (tablets, максимальная ширина области просмотра 992px и ниже)
@media (max-width: 991.98px) { ...код CSS }

// Large devices (desktops, максимальная ширина области просмотра 1200px и ниже)
@media (max-width: 1199.98px) { ...код CSS }